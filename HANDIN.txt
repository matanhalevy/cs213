Student Name #1: Vivian Jin	
Student ugrad login #1: z2a9

Student Name #2: Matan Halevy
Student ugrad login #2:c9t9a

Team name (for fun!): PuzzleSolvimus Prime 2000

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: Vivian Jin, Matan Halevy

TODO: submit using: make handin-proj1

----------------------------------------------------------------------

Approximate hours on project: ~24 hours?

----------------------------------------------------------------------

For teams, rough breakdown of work:we worked on everything together. 

----------------------------------------------------------------------

Acknowledgment of assistance: used lab5 as reference when implementing heapPQ

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use your queue classes to solve the MazeRunner
puzzle.  Set a large delay in the solvePuzzle function (like 1000000).
Do you see why this is called breadth-first search (BFS)?
How many steps long was your solution?  How does this compare with
your answers to #2 and #3 on your MILESTONE?
 
 It took 58 steps. It took the same number of steps as #3 (VectorPQ) and less than 
 #2 (stack). It is clearly BFS because it starts at its root, and then visits the children of the root,
 and then visits the children of those children, etc. In a way, it is traversing several paths at once and "jumping"
 around different paths and it gets further and further away from the root until it reaches the solution. 

2.  Try to solve the blank Sudoku board using your ArrayQueue
and LinkedListQueue classes.  What happens?

ArrayQueue -> it solves about a third of the board in ~15 minutes. It takes longer and longer to fill
the next space. 
LinkedListQueue-> this seems to work even slower than ArrayQueue, it solved less than the first row
around the same amount of time. It also takes longer and longer to fill the next space.
Both are slow and unefficient algorithms for solving this puzzle. 

3.  Switch to the medium-difficulty Sudoku problem, and comment
out the delay and the print statements in the solvePuzzle function.
How long does it take to solve the puzzle using your ArrayQueue
class?  Using your LinkedListQueue class?  Is the difference big?

ArrayQueue-> 0m1.719s 
LinkedListQueue-> 0m52.330s
ArrayQueue is about 50 seconds faster. 


4.  Edit solve.cpp to switch to the 4x4 slider puzzle.  Make sure
to comment out the delay and print statements in the solvePuzzle function.
How long does it take to solve this problem with your HeapPriorityQueue
versus my VectorPriorityQueue?  Why is mine faster?  Are the asymptotic
runtimes for the heap versus the vector wrong?

It takes ~2m51s with VectorPQ and ~3m31s with HeapPQ. VectorPQ is faster because at a small enough input, 
it is faster than HeapPQ. Asymptotic runtimes only tell you the worst cases for each, as n gets infinitely bigger.
This does not mean a function is always faster than another just because it has a faster asymptotic runtime. 
So this does not mean the asymptotic runtimes for heap versus the vector are wrong, it just means we haven't gotten to a big 
enough n. 
----------------------------------------------------------------------

We will be checking your implementations of ArrayQueue, LinkedListQueue,
and HeapPriorityQueue.
